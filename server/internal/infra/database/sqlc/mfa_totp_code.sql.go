// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: mfa_totp_code.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addMfaTotpCode = `-- name: AddMfaTotpCode :exec
INSERT INTO
    mfa_totp_code (
        id,
        mfa_method_id,
        secret,
        created_at
    )
VALUES
    (
        $1,
        $2,
        $3,
        $4
    )
`

type AddMfaTotpCodeParams struct {
	ID          uuid.UUID        `db:"id"`
	MfaMethodID uuid.UUID        `db:"mfa_method_id"`
	Secret      string           `db:"secret"`
	CreatedAt   pgtype.Timestamp `db:"created_at"`
}

// CREATE TABLE IF NOT EXISTS mfa_totp_code (
//
//	id UUID PRIMARY KEY,
//	mfa_method_id UUID NOT NULL,
//	secret VARCHAR(64) NOT NULL,
//	created_at TIMESTAMP NOT NULL,
//	/* mfa_totp_code >- application_user = fk_user_mfa_totp_code*/
//	CONSTRAINT fk_mfa_method_mfa_totp_code FOREIGN KEY (mfa_method_id) REFERENCES "mfa_method" (id) ON DELETE CASCADE
//
// );
// ----------------------------------COMMANDS--------------------------------------
func (q *Queries) AddMfaTotpCode(ctx context.Context, arg AddMfaTotpCodeParams) error {
	_, err := q.db.Exec(ctx, addMfaTotpCode,
		arg.ID,
		arg.MfaMethodID,
		arg.Secret,
		arg.CreatedAt,
	)
	return err
}

const deleteMfaTotpCode = `-- name: DeleteMfaTotpCode :exec
DELETE FROM
    mfa_totp_code
WHERE
    id = $1
`

func (q *Queries) DeleteMfaTotpCode(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteMfaTotpCode, id)
	return err
}

const getMfaTotpCodeByID = `-- name: GetMfaTotpCodeByID :one
SELECT
    id,
    mfa_method_id,
    secret,
    created_at
FROM
    mfa_totp_code
WHERE
    id = $1
`

// ----------------------------------QUERIES--------------------------------------
func (q *Queries) GetMfaTotpCodeByID(ctx context.Context, id uuid.UUID) (MfaTotpCode, error) {
	row := q.db.QueryRow(ctx, getMfaTotpCodeByID, id)
	var i MfaTotpCode
	err := row.Scan(
		&i.ID,
		&i.MfaMethodID,
		&i.Secret,
		&i.CreatedAt,
	)
	return i, err
}

const updateMfaTotpCode = `-- name: UpdateMfaTotpCode :exec
UPDATE
    mfa_totp_code
SET
    mfa_method_id = $1,
    secret = $2,
    created_at = $3
WHERE
    id = $4
`

type UpdateMfaTotpCodeParams struct {
	MfaMethodID uuid.UUID        `db:"mfa_method_id"`
	Secret      string           `db:"secret"`
	CreatedAt   pgtype.Timestamp `db:"created_at"`
	ID          uuid.UUID        `db:"id"`
}

func (q *Queries) UpdateMfaTotpCode(ctx context.Context, arg UpdateMfaTotpCodeParams) error {
	_, err := q.db.Exec(ctx, updateMfaTotpCode,
		arg.MfaMethodID,
		arg.Secret,
		arg.CreatedAt,
		arg.ID,
	)
	return err
}
