// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_profile.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
)

const addUserProfile = `-- name: AddUserProfile :exec


INSERT INTO user_profile (
    user_id,
    first_name,
    last_name,
    phone_number,
    "address",
    photo_url
) VALUES (
    $1, -- user_id
    $2, -- first_name
    $3, -- last_name
    $4, -- phone_number
    $5, -- address
    $6 -- photo_url
)
`

type AddUserProfileParams struct {
	UserID      uuid.UUID `db:"user_id"`
	FirstName   string    `db:"first_name"`
	LastName    string    `db:"last_name"`
	PhoneNumber *string   `db:"phone_number"`
	Address     *string   `db:"address"`
	PhotoUrl    *string   `db:"photo_url"`
}

// ----------------------------------COMMANDS--------------------------------------
func (q *Queries) AddUserProfile(ctx context.Context, arg AddUserProfileParams) error {
	_, err := q.db.Exec(ctx, addUserProfile,
		arg.UserID,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.Address,
		arg.PhotoUrl,
	)
	return err
}

const getUserProfileByUserId = `-- name: GetUserProfileByUserId :one


SELECT
    user_id,
    first_name,
    last_name,
    phone_number,
    "address",
    photo_url
FROM
    user_profile
WHERE
    user_id = $1
`

// ----------------------------------QUERIES--------------------------------------
func (q *Queries) GetUserProfileByUserId(ctx context.Context, userID uuid.UUID) (UserProfile, error) {
	row := q.db.QueryRow(ctx, getUserProfileByUserId, userID)
	var i UserProfile
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Address,
		&i.PhotoUrl,
	)
	return i, err
}
