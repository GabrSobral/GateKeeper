// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: session_code.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addSessionCode = `-- name: AddSessionCode :exec
INSERT INTO
    session_code (
        id,
        user_id,
        token,
        created_at,
        expires_at,
        is_used
    )
VALUES
    (
        $1,
        -- id
        $2,
        -- user_id
        -- email
        $3,
        -- token
        $4,
        -- created_at
        $5,
        -- expires_at
        $6 -- is_used
    )
`

type AddSessionCodeParams struct {
	ID        uuid.UUID        `db:"id"`
	UserID    uuid.UUID        `db:"user_id"`
	Token     string           `db:"token"`
	CreatedAt pgtype.Timestamp `db:"created_at"`
	ExpiresAt pgtype.Timestamp `db:"expires_at"`
	IsUsed    bool             `db:"is_used"`
}

// ----------------------------------COMMANDS--------------------------------------
func (q *Queries) AddSessionCode(ctx context.Context, arg AddSessionCodeParams) error {
	_, err := q.db.Exec(ctx, addSessionCode,
		arg.ID,
		arg.UserID,
		arg.Token,
		arg.CreatedAt,
		arg.ExpiresAt,
		arg.IsUsed,
	)
	return err
}

const deleteSessionCode = `-- name: DeleteSessionCode :exec
DELETE FROM
    session_code
WHERE
    id = $1
`

func (q *Queries) DeleteSessionCode(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSessionCode, id)
	return err
}

const getSessionCodeByToken = `-- name: GetSessionCodeByToken :one
SELECT
    id,
    user_id,
    token,
    created_at,
    expires_at,
    is_used
FROM
    session_code
WHERE
    user_id = $1
    AND token = $2
`

type GetSessionCodeByTokenParams struct {
	UserID uuid.UUID `db:"user_id"`
	Token  string    `db:"token"`
}

// ----------------------------------QUERIES--------------------------------------
func (q *Queries) GetSessionCodeByToken(ctx context.Context, arg GetSessionCodeByTokenParams) (SessionCode, error) {
	row := q.db.QueryRow(ctx, getSessionCodeByToken, arg.UserID, arg.Token)
	var i SessionCode
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.IsUsed,
	)
	return i, err
}

const revokeSessionCodeByUserID = `-- name: RevokeSessionCodeByUserID :exec
DELETE FROM
    session_code
WHERE
    user_id = $1
`

func (q *Queries) RevokeSessionCodeByUserID(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, revokeSessionCodeByUserID, userID)
	return err
}

const updateSessionCode = `-- name: UpdateSessionCode :exec
UPDATE
    session_code
SET
    user_id = $1,
    token = $2,
    created_at = $3,
    expires_at = $4,
    is_used = $5
WHERE
    id = $6
`

type UpdateSessionCodeParams struct {
	UserID    uuid.UUID        `db:"user_id"`
	Token     string           `db:"token"`
	CreatedAt pgtype.Timestamp `db:"created_at"`
	ExpiresAt pgtype.Timestamp `db:"expires_at"`
	IsUsed    bool             `db:"is_used"`
	ID        uuid.UUID        `db:"id"`
}

func (q *Queries) UpdateSessionCode(ctx context.Context, arg UpdateSessionCodeParams) error {
	_, err := q.db.Exec(ctx, updateSessionCode,
		arg.UserID,
		arg.Token,
		arg.CreatedAt,
		arg.ExpiresAt,
		arg.IsUsed,
		arg.ID,
	)
	return err
}
