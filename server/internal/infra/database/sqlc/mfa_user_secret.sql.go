// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: mfa_user_secret.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addMfaUserSecret = `-- name: AddMfaUserSecret :exec
INSERT INTO
    mfa_user_secret (
        id,
        user_id,
        secret,
        is_validated,
        created_at,
        expires_at
    )
VALUES
    (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6
    )
`

type AddMfaUserSecretParams struct {
	ID          uuid.UUID        `db:"id"`
	UserID      uuid.UUID        `db:"user_id"`
	Secret      string           `db:"secret"`
	IsValidated bool             `db:"is_validated"`
	CreatedAt   pgtype.Timestamp `db:"created_at"`
	ExpiresAt   pgtype.Timestamp `db:"expires_at"`
}

// ----------------------------------COMMANDS--------------------------------------
func (q *Queries) AddMfaUserSecret(ctx context.Context, arg AddMfaUserSecretParams) error {
	_, err := q.db.Exec(ctx, addMfaUserSecret,
		arg.ID,
		arg.UserID,
		arg.Secret,
		arg.IsValidated,
		arg.CreatedAt,
		arg.ExpiresAt,
	)
	return err
}

const getMfaUserSecretByUserId = `-- name: GetMfaUserSecretByUserId :one
SELECT
    id,
    user_id,
    secret,
    is_validated,
    created_at,
    expires_at
FROM
    mfa_user_secret
WHERE
    user_id = $1
`

// ----------------------------------QUERIES--------------------------------------
func (q *Queries) GetMfaUserSecretByUserId(ctx context.Context, userID uuid.UUID) (MfaUserSecret, error) {
	row := q.db.QueryRow(ctx, getMfaUserSecretByUserId, userID)
	var i MfaUserSecret
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Secret,
		&i.IsValidated,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const revokeMfaUserSecretFromUser = `-- name: RevokeMfaUserSecretFromUser :exec
DELETE FROM
    mfa_user_secret
WHERE
    user_id = $1
`

func (q *Queries) RevokeMfaUserSecretFromUser(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, revokeMfaUserSecretFromUser, userID)
	return err
}

const updateMfaUserSecret = `-- name: UpdateMfaUserSecret :exec
UPDATE
    mfa_user_secret
SET
    secret = $1,
    is_validated = $2,
    created_at = $3,
    expires_at = $4
WHERE
    id = $5
`

type UpdateMfaUserSecretParams struct {
	Secret      string           `db:"secret"`
	IsValidated bool             `db:"is_validated"`
	CreatedAt   pgtype.Timestamp `db:"created_at"`
	ExpiresAt   pgtype.Timestamp `db:"expires_at"`
	ID          uuid.UUID        `db:"id"`
}

func (q *Queries) UpdateMfaUserSecret(ctx context.Context, arg UpdateMfaUserSecretParams) error {
	_, err := q.db.Exec(ctx, updateMfaUserSecret,
		arg.Secret,
		arg.IsValidated,
		arg.CreatedAt,
		arg.ExpiresAt,
		arg.ID,
	)
	return err
}
