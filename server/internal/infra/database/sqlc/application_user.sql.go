// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: application_user.sql

package pgstore

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addUser = `-- name: AddUser :exec
INSERT INTO
    "application_user" (
        id,
        email,
        password_hash,
        application_id,
        created_at,
        updated_at,
        is_active,
        is_email_confirmed,
        two_factor_enabled,
        two_factor_secret
    )
VALUES
    (
        $1,
        -- id
        $2,
        -- email
        $3,
        -- password_hash
        $4,
        -- application_id
        $5,
        -- created_at
        $6,
        -- updated_at
        $7,
        -- is_active
        $8,
        -- is_email_confirmed
        $9,
        -- two_factor_enabled
        $10 -- two_factor_secret
    )
`

type AddUserParams struct {
	ID               uuid.UUID        `db:"id"`
	Email            string           `db:"email"`
	PasswordHash     *string          `db:"password_hash"`
	ApplicationID    uuid.UUID        `db:"application_id"`
	CreatedAt        pgtype.Timestamp `db:"created_at"`
	UpdatedAt        *time.Time       `db:"updated_at"`
	IsActive         bool             `db:"is_active"`
	IsEmailConfirmed bool             `db:"is_email_confirmed"`
	TwoFactorEnabled bool             `db:"two_factor_enabled"`
	TwoFactorSecret  *string          `db:"two_factor_secret"`
}

// ----------------------------------COMMANDS--------------------------------------
// Add user
func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) error {
	_, err := q.db.Exec(ctx, addUser,
		arg.ID,
		arg.Email,
		arg.PasswordHash,
		arg.ApplicationID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IsActive,
		arg.IsEmailConfirmed,
		arg.TwoFactorEnabled,
		arg.TwoFactorSecret,
	)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
    id,
    email,
    application_id,
    password_hash,
    created_at,
    updated_at,
    is_active,
    is_email_confirmed,
    two_factor_enabled,
    two_factor_secret
FROM
    "application_user"
WHERE
    email = $1
    AND application_id = $2
`

type GetUserByEmailParams struct {
	Email         string    `db:"email"`
	ApplicationID uuid.UUID `db:"application_id"`
}

type GetUserByEmailRow struct {
	ID               uuid.UUID        `db:"id"`
	Email            string           `db:"email"`
	ApplicationID    uuid.UUID        `db:"application_id"`
	PasswordHash     *string          `db:"password_hash"`
	CreatedAt        pgtype.Timestamp `db:"created_at"`
	UpdatedAt        *time.Time       `db:"updated_at"`
	IsActive         bool             `db:"is_active"`
	IsEmailConfirmed bool             `db:"is_email_confirmed"`
	TwoFactorEnabled bool             `db:"two_factor_enabled"`
	TwoFactorSecret  *string          `db:"two_factor_secret"`
}

// Get user by email
func (q *Queries) GetUserByEmail(ctx context.Context, arg GetUserByEmailParams) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, arg.Email, arg.ApplicationID)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.ApplicationID,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
		&i.IsEmailConfirmed,
		&i.TwoFactorEnabled,
		&i.TwoFactorSecret,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT
    id,
    email,
    application_id,
    password_hash,
    created_at,
    updated_at,
    is_active,
    is_email_confirmed,
    two_factor_enabled,
    two_factor_secret
FROM
    "application_user"
WHERE
    id = $1
`

type GetUserByIdRow struct {
	ID               uuid.UUID        `db:"id"`
	Email            string           `db:"email"`
	ApplicationID    uuid.UUID        `db:"application_id"`
	PasswordHash     *string          `db:"password_hash"`
	CreatedAt        pgtype.Timestamp `db:"created_at"`
	UpdatedAt        *time.Time       `db:"updated_at"`
	IsActive         bool             `db:"is_active"`
	IsEmailConfirmed bool             `db:"is_email_confirmed"`
	TwoFactorEnabled bool             `db:"two_factor_enabled"`
	TwoFactorSecret  *string          `db:"two_factor_secret"`
}

// ----------------------------------QUERIES--------------------------------------
// Get user by id
func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.ApplicationID,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
		&i.IsEmailConfirmed,
		&i.TwoFactorEnabled,
		&i.TwoFactorSecret,
	)
	return i, err
}

const isUserExistsByEmail = `-- name: IsUserExistsByEmail :one
SELECT
    EXISTS (
        SELECT
            1
        FROM
            "application_user"
        WHERE
            email = $1
            AND application_id = $2
    )
`

type IsUserExistsByEmailParams struct {
	Email         string    `db:"email"`
	ApplicationID uuid.UUID `db:"application_id"`
}

// Check if user exists by email
func (q *Queries) IsUserExistsByEmail(ctx context.Context, arg IsUserExistsByEmailParams) (bool, error) {
	row := q.db.QueryRow(ctx, isUserExistsByEmail, arg.Email, arg.ApplicationID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const isUserExistsById = `-- name: IsUserExistsById :one
SELECT
    EXISTS (
        SELECT
            1
        FROM
            "application_user"
        WHERE
            id = $1
    )
`

// Check if user exists by id
func (q *Queries) IsUserExistsById(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, isUserExistsById, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE
    "application_user"
SET
    email = $1,
    password_hash = $2,
    updated_at = $3,
    is_active = $4,
    is_email_confirmed = $5,
    two_factor_enabled = $6,
    two_factor_secret = $7
WHERE
    id = $8
`

type UpdateUserParams struct {
	Email            string     `db:"email"`
	PasswordHash     *string    `db:"password_hash"`
	UpdatedAt        *time.Time `db:"updated_at"`
	IsActive         bool       `db:"is_active"`
	IsEmailConfirmed bool       `db:"is_email_confirmed"`
	TwoFactorEnabled bool       `db:"two_factor_enabled"`
	TwoFactorSecret  *string    `db:"two_factor_secret"`
	ID               uuid.UUID  `db:"id"`
}

// Update user
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.Email,
		arg.PasswordHash,
		arg.UpdatedAt,
		arg.IsActive,
		arg.IsEmailConfirmed,
		arg.TwoFactorEnabled,
		arg.TwoFactorSecret,
		arg.ID,
	)
	return err
}
