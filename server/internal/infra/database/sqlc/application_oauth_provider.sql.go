// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: application_oauth_provider.sql

package pgstore

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addApplicationOauthProvider = `-- name: AddApplicationOauthProvider :exec
INSERT INTO
    application_oauth_provider (
        id,
        application_id,
        name,
        client_id,
        client_secret,
        redirect_uri,
        created_at,
        updated_at,
        "enabled"
    )
VALUES
    (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9
    )
`

type AddApplicationOauthProviderParams struct {
	ID            uuid.UUID        `db:"id"`
	ApplicationID uuid.UUID        `db:"application_id"`
	Name          string           `db:"name"`
	ClientID      string           `db:"client_id"`
	ClientSecret  string           `db:"client_secret"`
	RedirectUri   string           `db:"redirect_uri"`
	CreatedAt     pgtype.Timestamp `db:"created_at"`
	UpdatedAt     *time.Time       `db:"updated_at"`
	Enabled       bool             `db:"enabled"`
}

// ----------------------------------COMMANDS--------------------------------------
// Add a new application oauth provider
func (q *Queries) AddApplicationOauthProvider(ctx context.Context, arg AddApplicationOauthProviderParams) error {
	_, err := q.db.Exec(ctx, addApplicationOauthProvider,
		arg.ID,
		arg.ApplicationID,
		arg.Name,
		arg.ClientID,
		arg.ClientSecret,
		arg.RedirectUri,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Enabled,
	)
	return err
}

const checkIfApplicationOauthProviderConfigurationExists = `-- name: CheckIfApplicationOauthProviderConfigurationExists :one
SELECT
    EXISTS (
        SELECT
            1
        FROM
            application_oauth_provider
        WHERE
            application_id = $1
            AND name = $2
    ) AS EXISTS
`

type CheckIfApplicationOauthProviderConfigurationExistsParams struct {
	ApplicationID uuid.UUID `db:"application_id"`
	Name          string    `db:"name"`
}

// Check if application oauth provider configuration exists
func (q *Queries) CheckIfApplicationOauthProviderConfigurationExists(ctx context.Context, arg CheckIfApplicationOauthProviderConfigurationExistsParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkIfApplicationOauthProviderConfigurationExists, arg.ApplicationID, arg.Name)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getApplicationOauthProviderByID = `-- name: GetApplicationOauthProviderByID :one
SELECT
    id,
    application_id,
    name,
    client_id,
    client_secret,
    redirect_uri,
    created_at,
    updated_at,
    "enabled"
FROM
    application_oauth_provider
WHERE
    id = $1
`

// ----------------------------------QUERIES--------------------------------------
// Get application oauth provider by ID
func (q *Queries) GetApplicationOauthProviderByID(ctx context.Context, id uuid.UUID) (ApplicationOauthProvider, error) {
	row := q.db.QueryRow(ctx, getApplicationOauthProviderByID, id)
	var i ApplicationOauthProvider
	err := row.Scan(
		&i.ID,
		&i.ApplicationID,
		&i.Name,
		&i.ClientID,
		&i.ClientSecret,
		&i.RedirectUri,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Enabled,
	)
	return i, err
}

const getApplicationOauthProviderByName = `-- name: GetApplicationOauthProviderByName :one
SELECT
    id,
    application_id,
    name,
    client_id,
    client_secret,
    redirect_uri,
    created_at,
    updated_at,
    "enabled"
FROM
    application_oauth_provider
WHERE
    application_id = $1
    AND name = $2
`

type GetApplicationOauthProviderByNameParams struct {
	ApplicationID uuid.UUID `db:"application_id"`
	Name          string    `db:"name"`
}

// Get application oauth providers by application ID
func (q *Queries) GetApplicationOauthProviderByName(ctx context.Context, arg GetApplicationOauthProviderByNameParams) (ApplicationOauthProvider, error) {
	row := q.db.QueryRow(ctx, getApplicationOauthProviderByName, arg.ApplicationID, arg.Name)
	var i ApplicationOauthProvider
	err := row.Scan(
		&i.ID,
		&i.ApplicationID,
		&i.Name,
		&i.ClientID,
		&i.ClientSecret,
		&i.RedirectUri,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Enabled,
	)
	return i, err
}

const getApplicationOauthProvidersByApplicationID = `-- name: GetApplicationOauthProvidersByApplicationID :many
SELECT
    id,
    application_id,
    name,
    client_id,
    client_secret,
    redirect_uri,
    created_at,
    updated_at,
    "enabled"
FROM
    application_oauth_provider
WHERE
    application_id = $1
`

// Get application oauth providers by application ID
func (q *Queries) GetApplicationOauthProvidersByApplicationID(ctx context.Context, applicationID uuid.UUID) ([]ApplicationOauthProvider, error) {
	rows, err := q.db.Query(ctx, getApplicationOauthProvidersByApplicationID, applicationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApplicationOauthProvider
	for rows.Next() {
		var i ApplicationOauthProvider
		if err := rows.Scan(
			&i.ID,
			&i.ApplicationID,
			&i.Name,
			&i.ClientID,
			&i.ClientSecret,
			&i.RedirectUri,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Enabled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateApplicationOauthProvider = `-- name: UpdateApplicationOauthProvider :exec
UPDATE
    application_oauth_provider
SET
    name = $1,
    client_id = $2,
    client_secret = $3,
    redirect_uri = $4,
    updated_at = $5,
    "enabled" = $6
WHERE
    id = $7
`

type UpdateApplicationOauthProviderParams struct {
	Name         string     `db:"name"`
	ClientID     string     `db:"client_id"`
	ClientSecret string     `db:"client_secret"`
	RedirectUri  string     `db:"redirect_uri"`
	UpdatedAt    *time.Time `db:"updated_at"`
	Enabled      bool       `db:"enabled"`
	ID           uuid.UUID  `db:"id"`
}

// Update the application oauth provider
func (q *Queries) UpdateApplicationOauthProvider(ctx context.Context, arg UpdateApplicationOauthProviderParams) error {
	_, err := q.db.Exec(ctx, updateApplicationOauthProvider,
		arg.Name,
		arg.ClientID,
		arg.ClientSecret,
		arg.RedirectUri,
		arg.UpdatedAt,
		arg.Enabled,
		arg.ID,
	)
	return err
}
