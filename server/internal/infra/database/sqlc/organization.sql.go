// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: organization.sql

package pgstore

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addOrganization = `-- name: AddOrganization :exec

INSERT INTO organization (
    id,
    name,
    description,
    created_at
) VALUES (
    $1, -- user_id
    $2, -- name
    $3, -- description
    $4 -- user_id
)
`

type AddOrganizationParams struct {
	UserID      uuid.UUID        `db:"user_id"`
	Name        string           `db:"name"`
	Description *string          `db:"description"`
	CreatedAt   pgtype.Timestamp `db:"created_at"`
}

// ----------------------------------COMMANDS--------------------------------------
func (q *Queries) AddOrganization(ctx context.Context, arg AddOrganizationParams) error {
	_, err := q.db.Exec(ctx, addOrganization,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.CreatedAt,
	)
	return err
}

const getOrganizationByID = `-- name: GetOrganizationByID :one


SELECT
    id,
    name,
    description,
    created_at,
    updated_at
FROM "organization"
WHERE
    id = $1
`

// ----------------------------------QUERIES--------------------------------------
func (q *Queries) GetOrganizationByID(ctx context.Context, organizationID uuid.UUID) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrganizationByID, organizationID)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOrganizations = `-- name: ListOrganizations :many
SELECT
    id,
    name,
    description,
    created_at,
    updated_at
FROM organization
ORDER BY created_at DESC
`

func (q *Queries) ListOrganizations(ctx context.Context) ([]Organization, error) {
	rows, err := q.db.Query(ctx, listOrganizations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeOrganization = `-- name: RemoveOrganization :exec
DELETE FROM organization
WHERE id = $1
`

func (q *Queries) RemoveOrganization(ctx context.Context, organizationID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeOrganization, organizationID)
	return err
}

const updateOrganization = `-- name: UpdateOrganization :exec
UPDATE organization
SET
    name = $1,
    description = $2,
    updated_at = $3
WHERE id = $4
`

type UpdateOrganizationParams struct {
	Name        string     `db:"name"`
	Description *string    `db:"description"`
	UpdatedAt   *time.Time `db:"updated_at"`
	ID          uuid.UUID  `db:"id"`
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) error {
	_, err := q.db.Exec(ctx, updateOrganization,
		arg.Name,
		arg.Description,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
