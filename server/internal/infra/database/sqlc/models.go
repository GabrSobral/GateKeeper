// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package pgstore

import (
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type AppMfaCode struct {
	ID        uuid.UUID        `db:"id"`
	UserID    uuid.UUID        `db:"user_id"`
	Email     string           `db:"email"`
	CreatedAt pgtype.Timestamp `db:"created_at"`
	ExpiresAt pgtype.Timestamp `db:"expires_at"`
}

type Application struct {
	ID                 uuid.UUID        `db:"id"`
	OrganizationID     uuid.UUID        `db:"organization_id"`
	Name               string           `db:"name"`
	Description        *string          `db:"description"`
	IsActive           bool             `db:"is_active"`
	HasMfaAuthApp      bool             `db:"has_mfa_auth_app"`
	HasMfaEmail        bool             `db:"has_mfa_email"`
	PasswordHashSecret string           `db:"password_hash_secret"`
	Badges             *string          `db:"badges"`
	CreatedAt          pgtype.Timestamp `db:"created_at"`
	UpdatedAt          *time.Time       `db:"updated_at"`
	CanSelfSignUp      bool             `db:"can_self_sign_up"`
	CanSelfForgotPass  bool             `db:"can_self_forgot_pass"`
}

type ApplicationAuthorizationCode struct {
	ID                  uuid.UUID        `db:"id"`
	ApplicationID       uuid.UUID        `db:"application_id"`
	UserID              uuid.UUID        `db:"user_id"`
	ExpiredAt           pgtype.Timestamp `db:"expired_at"`
	Code                string           `db:"code"`
	RedirectUri         string           `db:"redirect_uri"`
	CodeChallenge       string           `db:"code_challenge"`
	CodeChallengeMethod string           `db:"code_challenge_method"`
}

type ApplicationMailConfig struct {
	ID            uuid.UUID        `db:"id"`
	ApplicationID uuid.UUID        `db:"application_id"`
	Host          string           `db:"host"`
	Username      string           `db:"username"`
	Password      string           `db:"password"`
	Port          int32            `db:"port"`
	CreatedAt     pgtype.Timestamp `db:"created_at"`
	UpdatedAt     *time.Time       `db:"updated_at"`
}

type ApplicationOauthProvider struct {
	ID            uuid.UUID        `db:"id"`
	ApplicationID uuid.UUID        `db:"application_id"`
	Name          string           `db:"name"`
	ClientID      string           `db:"client_id"`
	ClientSecret  string           `db:"client_secret"`
	CreatedAt     pgtype.Timestamp `db:"created_at"`
	UpdatedAt     *time.Time       `db:"updated_at"`
}

type ApplicationRole struct {
	ID            uuid.UUID        `db:"id"`
	ApplicationID uuid.UUID        `db:"application_id"`
	Name          string           `db:"name"`
	Description   *string          `db:"description"`
	CreatedAt     pgtype.Timestamp `db:"created_at"`
	UpdatedAt     *time.Time       `db:"updated_at"`
}

type ApplicationSecret struct {
	ID            uuid.UUID        `db:"id"`
	ApplicationID uuid.UUID        `db:"application_id"`
	Name          string           `db:"name"`
	Value         string           `db:"value"`
	Description   *string          `db:"description"`
	CreatedAt     pgtype.Timestamp `db:"created_at"`
	UpdatedAt     *time.Time       `db:"updated_at"`
	ExpiresAt     *time.Time       `db:"expires_at"`
}

type ApplicationUser struct {
	ID                  uuid.UUID        `db:"id"`
	ApplicationID       uuid.UUID        `db:"application_id"`
	Email               string           `db:"email"`
	PasswordHash        *string          `db:"password_hash"`
	CreatedAt           pgtype.Timestamp `db:"created_at"`
	UpdatedAt           *time.Time       `db:"updated_at"`
	IsActive            bool             `db:"is_active"`
	IsEmailConfirmed    bool             `db:"is_email_confirmed"`
	IsMfaAuthAppEnabled bool             `db:"is_mfa_auth_app_enabled"`
	ShouldChangePass    bool             `db:"should_change_pass"`
	IsMfaEmailEnabled   bool             `db:"is_mfa_email_enabled"`
	TwoFactorSecret     *string          `db:"two_factor_secret"`
	Preferred2faMethod  pgtype.Int2      `db:"preferred_2fa_method"`
}

type ChangePasswordCode struct {
	ID        uuid.UUID        `db:"id"`
	UserID    uuid.UUID        `db:"user_id"`
	Email     string           `db:"email"`
	Token     string           `db:"token"`
	CreatedAt pgtype.Timestamp `db:"created_at"`
	ExpiresAt pgtype.Timestamp `db:"expires_at"`
}

type EmailConfirmation struct {
	ID        uuid.UUID        `db:"id"`
	UserID    uuid.UUID        `db:"user_id"`
	Email     string           `db:"email"`
	Token     string           `db:"token"`
	CreatedAt pgtype.Timestamp `db:"created_at"`
	CoolDown  pgtype.Timestamp `db:"cool_down"`
	ExpiresAt pgtype.Timestamp `db:"expires_at"`
	IsUsed    bool             `db:"is_used"`
}

type EmailMfaCode struct {
	ID        uuid.UUID        `db:"id"`
	UserID    uuid.UUID        `db:"user_id"`
	Email     string           `db:"email"`
	Token     string           `db:"token"`
	CreatedAt pgtype.Timestamp `db:"created_at"`
	ExpiresAt pgtype.Timestamp `db:"expires_at"`
	IsUsed    bool             `db:"is_used"`
}

type ExternalLogin struct {
	UserID      uuid.UUID `db:"user_id"`
	Email       string    `db:"email"`
	Provider    string    `db:"provider"`
	ProviderKey string    `db:"provider_key"`
}

type MfaUserSecret struct {
	ID          uuid.UUID        `db:"id"`
	UserID      uuid.UUID        `db:"user_id"`
	Secret      string           `db:"secret"`
	IsValidated bool             `db:"is_validated"`
	CreatedAt   pgtype.Timestamp `db:"created_at"`
	ExpiresAt   pgtype.Timestamp `db:"expires_at"`
}

type Organization struct {
	ID          uuid.UUID        `db:"id"`
	Name        string           `db:"name"`
	Description *string          `db:"description"`
	CreatedAt   pgtype.Timestamp `db:"created_at"`
	UpdatedAt   *time.Time       `db:"updated_at"`
}

type PasswordResetToken struct {
	ID        uuid.UUID        `db:"id"`
	UserID    uuid.UUID        `db:"user_id"`
	Token     string           `db:"token"`
	CreatedAt pgtype.Timestamp `db:"created_at"`
	ExpiresAt pgtype.Timestamp `db:"expires_at"`
}

type RefreshToken struct {
	ID                 uuid.UUID        `db:"id"`
	UserID             uuid.UUID        `db:"user_id"`
	AvailableRefreshes int32            `db:"available_refreshes"`
	ExpiresAt          pgtype.Timestamp `db:"expires_at"`
	CreatedAt          pgtype.Timestamp `db:"created_at"`
}

type SessionCode struct {
	ID        uuid.UUID        `db:"id"`
	UserID    uuid.UUID        `db:"user_id"`
	Token     string           `db:"token"`
	CreatedAt pgtype.Timestamp `db:"created_at"`
	ExpiresAt pgtype.Timestamp `db:"expires_at"`
	IsUsed    bool             `db:"is_used"`
}

type UserProfile struct {
	UserID      uuid.UUID `db:"user_id"`
	DisplayName string    `db:"display_name"`
	FirstName   string    `db:"first_name"`
	LastName    string    `db:"last_name"`
	PhoneNumber *string   `db:"phone_number"`
	Address     *string   `db:"address"`
	PhotoUrl    *string   `db:"photo_url"`
}

type UserRole struct {
	UserID    uuid.UUID        `db:"user_id"`
	RoleID    uuid.UUID        `db:"role_id"`
	CreatedAt pgtype.Timestamp `db:"created_at"`
}
