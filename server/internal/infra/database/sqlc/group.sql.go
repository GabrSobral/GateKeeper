// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: group.sql

package pgstore

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addGroup = `-- name: AddGroup :exec

INSERT INTO "group" (
    id,
    application_id,
    name,
    description,
    created_at,
    updated_at
) VALUES (
    $1, -- id
    $2, -- application_id
    $3, -- name
    $4, -- description
    $5, -- created_at
    $6 -- updated_at
)
`

type AddGroupParams struct {
	ID            uuid.UUID        `db:"id"`
	ApplicationID uuid.UUID        `db:"application_id"`
	Name          string           `db:"name"`
	Description   *string          `db:"description"`
	CreatedAt     pgtype.Timestamp `db:"created_at"`
	UpdatedAt     *time.Time       `db:"updated_at"`
}

// ----------------------------------COMMANDS--------------------------------------
func (q *Queries) AddGroup(ctx context.Context, arg AddGroupParams) error {
	_, err := q.db.Exec(ctx, addGroup,
		arg.ID,
		arg.ApplicationID,
		arg.Name,
		arg.Description,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getGroupById = `-- name: GetGroupById :one

SELECT
    id,
    application_id,
    name,
    description,
    created_at,
    updated_at
FROM "group"
WHERE
    id = $1
`

// ----------------------------------QUERIES--------------------------------------
func (q *Queries) GetGroupById(ctx context.Context, id uuid.UUID) (Group, error) {
	row := q.db.QueryRow(ctx, getGroupById, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.ApplicationID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listGroupsFromApplication = `-- name: ListGroupsFromApplication :many
SELECT
    id,
    application_id,
    name,
    description,
    created_at,
    updated_at
FROM "group"
WHERE
    application_id = $1
`

func (q *Queries) ListGroupsFromApplication(ctx context.Context, applicationID uuid.UUID) ([]Group, error) {
	rows, err := q.db.Query(ctx, listGroupsFromApplication, applicationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.ApplicationID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeGroup = `-- name: RemoveGroup :exec
DELETE FROM "group" WHERE id = $1
`

func (q *Queries) RemoveGroup(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeGroup, id)
	return err
}

const updateGroup = `-- name: UpdateGroup :exec
UPDATE "group" SET
    application_id = $1,
    name = $2,
    description = $3,
    updated_at = $4
WHERE id = $5
`

type UpdateGroupParams struct {
	ApplicationID uuid.UUID  `db:"application_id"`
	Name          string     `db:"name"`
	Description   *string    `db:"description"`
	UpdatedAt     *time.Time `db:"updated_at"`
	ID            uuid.UUID  `db:"id"`
}

func (q *Queries) UpdateGroup(ctx context.Context, arg UpdateGroupParams) error {
	_, err := q.db.Exec(ctx, updateGroup,
		arg.ApplicationID,
		arg.Name,
		arg.Description,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
