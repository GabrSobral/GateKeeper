// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: email_confirmation.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addEmailConfirmation = `-- name: AddEmailConfirmation :exec

INSERT INTO email_confirmation (
    id,
    user_id,
    email,
    token,
    created_at,
    cool_down,
    expires_at,
    is_used
) VALUES (
    $1, -- id
    $2, -- user_id
    $3, -- email
    $4, -- token
    $5, -- created_at
    $6, -- cool_down
    $7, -- expires_at
    $8 -- is_used
)
`

type AddEmailConfirmationParams struct {
	ID        uuid.UUID        `db:"id"`
	UserID    uuid.UUID        `db:"user_id"`
	Email     string           `db:"email"`
	Token     string           `db:"token"`
	CreatedAt pgtype.Timestamp `db:"created_at"`
	CoolDown  pgtype.Timestamp `db:"cool_down"`
	ExpiresAt pgtype.Timestamp `db:"expires_at"`
	IsUsed    bool             `db:"is_used"`
}

// ----------------------------------COMMANDS--------------------------------------
func (q *Queries) AddEmailConfirmation(ctx context.Context, arg AddEmailConfirmationParams) error {
	_, err := q.db.Exec(ctx, addEmailConfirmation,
		arg.ID,
		arg.UserID,
		arg.Email,
		arg.Token,
		arg.CreatedAt,
		arg.CoolDown,
		arg.ExpiresAt,
		arg.IsUsed,
	)
	return err
}

const deleteEmailConfirmation = `-- name: DeleteEmailConfirmation :exec
DELETE FROM email_confirmation WHERE id = $1
`

func (q *Queries) DeleteEmailConfirmation(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteEmailConfirmation, id)
	return err
}

const getEmailConfirmationByEmail = `-- name: GetEmailConfirmationByEmail :one

SELECT
    id,
    user_id,
    email,
    token,
    created_at,
    cool_down,
    expires_at,
    is_used
FROM email_confirmation
WHERE 
    email = $1 AND 
    user_id = $2
`

type GetEmailConfirmationByEmailParams struct {
	Email  string    `db:"email"`
	UserID uuid.UUID `db:"user_id"`
}

// ----------------------------------QUERIES--------------------------------------
func (q *Queries) GetEmailConfirmationByEmail(ctx context.Context, arg GetEmailConfirmationByEmailParams) (EmailConfirmation, error) {
	row := q.db.QueryRow(ctx, getEmailConfirmationByEmail, arg.Email, arg.UserID)
	var i EmailConfirmation
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.Token,
		&i.CreatedAt,
		&i.CoolDown,
		&i.ExpiresAt,
		&i.IsUsed,
	)
	return i, err
}

const updateEmailConfirmation = `-- name: UpdateEmailConfirmation :exec
UPDATE email_confirmation SET
    user_id = $1,
    email = $2,
    token = $3,
    created_at = $4,
    cool_down = $5,
    expires_at = $6,
    is_used = $7
WHERE id = $8
`

type UpdateEmailConfirmationParams struct {
	UserID    uuid.UUID        `db:"user_id"`
	Email     string           `db:"email"`
	Token     string           `db:"token"`
	CreatedAt pgtype.Timestamp `db:"created_at"`
	CoolDown  pgtype.Timestamp `db:"cool_down"`
	ExpiresAt pgtype.Timestamp `db:"expires_at"`
	IsUsed    bool             `db:"is_used"`
	ID        uuid.UUID        `db:"id"`
}

func (q *Queries) UpdateEmailConfirmation(ctx context.Context, arg UpdateEmailConfirmationParams) error {
	_, err := q.db.Exec(ctx, updateEmailConfirmation,
		arg.UserID,
		arg.Email,
		arg.Token,
		arg.CreatedAt,
		arg.CoolDown,
		arg.ExpiresAt,
		arg.IsUsed,
		arg.ID,
	)
	return err
}
