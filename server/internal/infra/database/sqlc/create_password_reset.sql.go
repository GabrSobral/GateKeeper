// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: create_password_reset.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPasswordReset = `-- name: CreatePasswordReset :exec

INSERT INTO password_reset_token (
    id,
    user_id,
    token,
    created_at,
    expires_at
) VALUES (
    $1, -- id
    $2, -- user_id
    $3, -- token
    $4, -- created_at
    $5 -- expires_at
)
`

type CreatePasswordResetParams struct {
	ID        uuid.UUID        `db:"id"`
	UserID    uuid.UUID        `db:"user_id"`
	Token     string           `db:"token"`
	CreatedAt pgtype.Timestamp `db:"created_at"`
	ExpiresAt pgtype.Timestamp `db:"expires_at"`
}

// ----------------------------------COMMANDS--------------------------------------
func (q *Queries) CreatePasswordReset(ctx context.Context, arg CreatePasswordResetParams) error {
	_, err := q.db.Exec(ctx, createPasswordReset,
		arg.ID,
		arg.UserID,
		arg.Token,
		arg.CreatedAt,
		arg.ExpiresAt,
	)
	return err
}

const deletePasswordResetFromUser = `-- name: DeletePasswordResetFromUser :exec
DELETE FROM password_reset_token WHERE user_id = $1
`

func (q *Queries) DeletePasswordResetFromUser(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePasswordResetFromUser, userID)
	return err
}

const getPasswordResetByTokenID = `-- name: GetPasswordResetByTokenID :one

SELECT
    id,
    user_id,
    token,
    created_at,
    expires_at
FROM password_reset_token
WHERE
    id = $1
`

// ----------------------------------QUERIES--------------------------------------
func (q *Queries) GetPasswordResetByTokenID(ctx context.Context, id uuid.UUID) (PasswordResetToken, error) {
	row := q.db.QueryRow(ctx, getPasswordResetByTokenID, id)
	var i PasswordResetToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
