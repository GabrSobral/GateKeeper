// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: app_mfa_code.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addAppMfaCode = `-- name: AddAppMfaCode :exec
INSERT INTO
    app_mfa_code (
        id,
        user_id,
        email,
        created_at,
        expires_at
    )
VALUES
    (
        $1,
        $2,
        $3,
        $4,
        $5
    )
`

type AddAppMfaCodeParams struct {
	ID        uuid.UUID        `db:"id"`
	UserID    uuid.UUID        `db:"user_id"`
	Email     string           `db:"email"`
	CreatedAt pgtype.Timestamp `db:"created_at"`
	ExpiresAt pgtype.Timestamp `db:"expires_at"`
}

// ----------------------------------COMMANDS--------------------------------------
func (q *Queries) AddAppMfaCode(ctx context.Context, arg AddAppMfaCodeParams) error {
	_, err := q.db.Exec(ctx, addAppMfaCode,
		arg.ID,
		arg.UserID,
		arg.Email,
		arg.CreatedAt,
		arg.ExpiresAt,
	)
	return err
}

const deleteAppMfaCode = `-- name: DeleteAppMfaCode :exec
DELETE FROM
    app_mfa_code
WHERE
    id = $1
`

func (q *Queries) DeleteAppMfaCode(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAppMfaCode, id)
	return err
}

const getAppMfaCodeByID = `-- name: GetAppMfaCodeByID :one
SELECT
    id,
    user_id,
    email,
    created_at,
    expires_at
FROM
    app_mfa_code
WHERE
    id = $1
`

// ----------------------------------QUERIES--------------------------------------
func (q *Queries) GetAppMfaCodeByID(ctx context.Context, id uuid.UUID) (AppMfaCode, error) {
	row := q.db.QueryRow(ctx, getAppMfaCodeByID, id)
	var i AppMfaCode
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const revokeAppMfaCodeByUserID = `-- name: RevokeAppMfaCodeByUserID :exec
DELETE FROM
    app_mfa_code
WHERE
    user_id = $1
`

func (q *Queries) RevokeAppMfaCodeByUserID(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, revokeAppMfaCodeByUserID, userID)
	return err
}

const updateAppMfaCode = `-- name: UpdateAppMfaCode :exec
UPDATE
    app_mfa_code
SET
    user_id = $1,
    email = $2,
    created_at = $3,
    expires_at = $4
WHERE
    id = $5
`

type UpdateAppMfaCodeParams struct {
	UserID    uuid.UUID        `db:"user_id"`
	Email     string           `db:"email"`
	CreatedAt pgtype.Timestamp `db:"created_at"`
	ExpiresAt pgtype.Timestamp `db:"expires_at"`
	ID        uuid.UUID        `db:"id"`
}

func (q *Queries) UpdateAppMfaCode(ctx context.Context, arg UpdateAppMfaCodeParams) error {
	_, err := q.db.Exec(ctx, updateAppMfaCode,
		arg.UserID,
		arg.Email,
		arg.CreatedAt,
		arg.ExpiresAt,
		arg.ID,
	)
	return err
}
