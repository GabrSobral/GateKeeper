// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: mfa_method.sql

package pgstore

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addMfaMethod = `-- name: AddMfaMethod :exec
INSERT INTO
    mfa_method (
        id,
        user_id,
        "type",
        enabled,
        created_at,
        last_used_at
    )
VALUES
    (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6
    )
`

type AddMfaMethodParams struct {
	ID         uuid.UUID        `db:"id"`
	UserID     uuid.UUID        `db:"user_id"`
	Type       string           `db:"type"`
	Enabled    bool             `db:"enabled"`
	CreatedAt  pgtype.Timestamp `db:"created_at"`
	LastUsedAt *time.Time       `db:"last_used_at"`
}

// CREATE TABLE IF NOT EXISTS mfa_method (
//
//	id UUID PRIMARY KEY,
//	user_id UUID NOT NULL,
//	"type" VARCHAR(16) NOT NULL,
//	enabled BOOLEAN NOT NULL DEFAULT TRUE,
//	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
//	last_used_at TIMESTAMP NULL,
//	/* mfa_method >- application_user = fk_user_mfa_method */
//	CONSTRAINT fk_user_mfa_method FOREIGN KEY (user_id) REFERENCES "application_user" (id) ON DELETE CASCADE
//
// );
// ----------------------------------COMMANDS--------------------------------------
func (q *Queries) AddMfaMethod(ctx context.Context, arg AddMfaMethodParams) error {
	_, err := q.db.Exec(ctx, addMfaMethod,
		arg.ID,
		arg.UserID,
		arg.Type,
		arg.Enabled,
		arg.CreatedAt,
		arg.LastUsedAt,
	)
	return err
}

const getMfaMethodByUserIDAndMethod = `-- name: GetMfaMethodByUserIDAndMethod :one
SELECT
    id,
    user_id,
    "type",
    enabled,
    created_at,
    last_used_at
FROM
    mfa_method
WHERE
    user_id = $1
    AND "type" = $2
`

type GetMfaMethodByUserIDAndMethodParams struct {
	UserID uuid.UUID `db:"user_id"`
	Type   string    `db:"type"`
}

// ----------------------------------QUERIES--------------------------------------
func (q *Queries) GetMfaMethodByUserIDAndMethod(ctx context.Context, arg GetMfaMethodByUserIDAndMethodParams) (MfaMethod, error) {
	row := q.db.QueryRow(ctx, getMfaMethodByUserIDAndMethod, arg.UserID, arg.Type)
	var i MfaMethod
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.Enabled,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const getUserMfaMethods = `-- name: GetUserMfaMethods :many
SELECT
    id,
    user_id,
    "type",
    enabled,
    created_at,
    last_used_at
FROM
    mfa_method
WHERE
    user_id = $1
`

func (q *Queries) GetUserMfaMethods(ctx context.Context, userID uuid.UUID) ([]MfaMethod, error) {
	rows, err := q.db.Query(ctx, getUserMfaMethods, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MfaMethod
	for rows.Next() {
		var i MfaMethod
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Type,
			&i.Enabled,
			&i.CreatedAt,
			&i.LastUsedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
