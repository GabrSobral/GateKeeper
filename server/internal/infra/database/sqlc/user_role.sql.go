// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_role.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addUserRole = `-- name: AddUserRole :exec
INSERT INTO
    user_role (user_id, role_id, created_at)
VALUES
    (
        $1,
        -- user_id
        $2,
        -- role_id
        $3 -- created_at
    )
`

type AddUserRoleParams struct {
	UserID    uuid.UUID        `db:"user_id"`
	RoleID    uuid.UUID        `db:"role_id"`
	CreatedAt pgtype.Timestamp `db:"created_at"`
}

// ----------------------------------COMMANDS--------------------------------------
func (q *Queries) AddUserRole(ctx context.Context, arg AddUserRoleParams) error {
	_, err := q.db.Exec(ctx, addUserRole, arg.UserID, arg.RoleID, arg.CreatedAt)
	return err
}

const getUserRoles = `-- name: GetUserRoles :many
SELECT
    r.id AS id,
    r.name AS name
FROM
    user_role AS ur
    INNER JOIN application_role AS r ON ur.role_id = r.id
WHERE
    user_id = $1
`

type GetUserRolesRow struct {
	ID   uuid.UUID `db:"id"`
	Name string    `db:"name"`
}

// ----------------------------------QUERIES--------------------------------------
func (q *Queries) GetUserRoles(ctx context.Context, userID uuid.UUID) ([]GetUserRolesRow, error) {
	rows, err := q.db.Query(ctx, getUserRoles, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserRolesRow
	for rows.Next() {
		var i GetUserRolesRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeUserRole = `-- name: RemoveUserRole :exec
DELETE FROM
    user_role
WHERE
    user_id = $1
    AND role_id = $2
`

type RemoveUserRoleParams struct {
	UserID uuid.UUID `db:"user_id"`
	RoleID uuid.UUID `db:"role_id"`
}

func (q *Queries) RemoveUserRole(ctx context.Context, arg RemoveUserRoleParams) error {
	_, err := q.db.Exec(ctx, removeUserRole, arg.UserID, arg.RoleID)
	return err
}
