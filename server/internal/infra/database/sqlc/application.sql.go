// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: application.sql

package pgstore

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addApplication = `-- name: AddApplication :exec
/*
 CREATE TABLE IF NOT EXISTS "application" (
 id UUID PRIMARY KEY,
 organization_id UUID NOT NULL,
 name VARCHAR(255) NOT NULL,
 description TEXT NULL,
 is_active BOOLEAN NOT NULL DEFAULT TRUE,
 has_mfa_auth_app BOOLEAN NOT NULL DEFAULT FALSE,
 has_mfa_email BOOLEAN NOT NULL DEFAULT FALSE,
 password_hash_secret VARCHAR(255) NOT NULL,
 badges TEXT NULL,
 created_at TIMESTAMP NOT NULL,
 updated_at TIMESTAMP NULL
 );
 */
INSERT INTO
    "application" (
        id,
        organization_id,
        name,
        is_active,
        has_mfa_auth_app,
        has_mfa_email,
        password_hash_secret,
        badges,
        description,
        created_at,
        updated_at
    )
VALUES
    (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11
    )
`

type AddApplicationParams struct {
	ID                 uuid.UUID        `db:"id"`
	OrganizationID     uuid.UUID        `db:"organization_id"`
	Name               string           `db:"name"`
	IsActive           bool             `db:"is_active"`
	HasMfaAuthApp      bool             `db:"has_mfa_auth_app"`
	HasMfaEmail        bool             `db:"has_mfa_email"`
	PasswordHashSecret string           `db:"password_hash_secret"`
	Badges             *string          `db:"badges"`
	Description        *string          `db:"description"`
	CreatedAt          pgtype.Timestamp `db:"created_at"`
	UpdatedAt          *time.Time       `db:"updated_at"`
}

// ----------------------------------COMMANDS--------------------------------------
func (q *Queries) AddApplication(ctx context.Context, arg AddApplicationParams) error {
	_, err := q.db.Exec(ctx, addApplication,
		arg.ID,
		arg.OrganizationID,
		arg.Name,
		arg.IsActive,
		arg.HasMfaAuthApp,
		arg.HasMfaEmail,
		arg.PasswordHashSecret,
		arg.Badges,
		arg.Description,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const checkIfApplicationExists = `-- name: CheckIfApplicationExists :one
SELECT
    EXISTS (
        SELECT
            1
        FROM
            "application"
        WHERE
            id = $1
    )
`

// ----------------------------------QUERIES--------------------------------------
func (q *Queries) CheckIfApplicationExists(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, checkIfApplicationExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const deleteApplication = `-- name: DeleteApplication :exec
DELETE FROM
    "application"
WHERE
    id = $1
`

func (q *Queries) DeleteApplication(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteApplication, id)
	return err
}

const getApplicationByID = `-- name: GetApplicationByID :one
SELECT
    id,
    organization_id,
    name,
    description,
    badges,
    is_active,
    has_mfa_auth_app,
    has_mfa_email,
    password_hash_secret,
    created_at,
    updated_at
FROM
    "application"
WHERE
    id = $1
`

type GetApplicationByIDRow struct {
	ID                 uuid.UUID        `db:"id"`
	OrganizationID     uuid.UUID        `db:"organization_id"`
	Name               string           `db:"name"`
	Description        *string          `db:"description"`
	Badges             *string          `db:"badges"`
	IsActive           bool             `db:"is_active"`
	HasMfaAuthApp      bool             `db:"has_mfa_auth_app"`
	HasMfaEmail        bool             `db:"has_mfa_email"`
	PasswordHashSecret string           `db:"password_hash_secret"`
	CreatedAt          pgtype.Timestamp `db:"created_at"`
	UpdatedAt          *time.Time       `db:"updated_at"`
}

func (q *Queries) GetApplicationByID(ctx context.Context, id uuid.UUID) (GetApplicationByIDRow, error) {
	row := q.db.QueryRow(ctx, getApplicationByID, id)
	var i GetApplicationByIDRow
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.Description,
		&i.Badges,
		&i.IsActive,
		&i.HasMfaAuthApp,
		&i.HasMfaEmail,
		&i.PasswordHashSecret,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listApplicationsFromOrganization = `-- name: ListApplicationsFromOrganization :many
SELECT
    id,
    organization_id,
    name,
    description,
    badges,
    created_at,
    updated_at
FROM
    "application"
WHERE
    organization_id = $1
`

type ListApplicationsFromOrganizationRow struct {
	ID             uuid.UUID        `db:"id"`
	OrganizationID uuid.UUID        `db:"organization_id"`
	Name           string           `db:"name"`
	Description    *string          `db:"description"`
	Badges         *string          `db:"badges"`
	CreatedAt      pgtype.Timestamp `db:"created_at"`
	UpdatedAt      *time.Time       `db:"updated_at"`
}

func (q *Queries) ListApplicationsFromOrganization(ctx context.Context, organizationID uuid.UUID) ([]ListApplicationsFromOrganizationRow, error) {
	rows, err := q.db.Query(ctx, listApplicationsFromOrganization, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListApplicationsFromOrganizationRow
	for rows.Next() {
		var i ListApplicationsFromOrganizationRow
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.Name,
			&i.Description,
			&i.Badges,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateApplication = `-- name: UpdateApplication :exec
UPDATE
    "application"
SET
    organization_id = $1,
    name = $2,
    description = $3,
    updated_at = $4
WHERE
    id = $5
`

type UpdateApplicationParams struct {
	OrganizationID uuid.UUID  `db:"organization_id"`
	Name           string     `db:"name"`
	Description    *string    `db:"description"`
	UpdatedAt      *time.Time `db:"updated_at"`
	ID             uuid.UUID  `db:"id"`
}

func (q *Queries) UpdateApplication(ctx context.Context, arg UpdateApplicationParams) error {
	_, err := q.db.Exec(ctx, updateApplication,
		arg.OrganizationID,
		arg.Name,
		arg.Description,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
