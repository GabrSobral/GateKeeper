// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: mfa_email_code.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addMfaEmailCode = `-- name: AddMfaEmailCode :exec
INSERT INTO
    mfa_email_code (
        id,
        mfa_method_id,
        token,
        created_at,
        expires_at,
        verified
    )
VALUES
    (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6
    )
`

type AddMfaEmailCodeParams struct {
	ID          uuid.UUID        `db:"id"`
	MfaMethodID uuid.UUID        `db:"mfa_method_id"`
	Token       string           `db:"token"`
	CreatedAt   pgtype.Timestamp `db:"created_at"`
	ExpiresAt   pgtype.Timestamp `db:"expires_at"`
	Verified    bool             `db:"verified"`
}

// ----------------------------------COMMANDS--------------------------------------
func (q *Queries) AddMfaEmailCode(ctx context.Context, arg AddMfaEmailCodeParams) error {
	_, err := q.db.Exec(ctx, addMfaEmailCode,
		arg.ID,
		arg.MfaMethodID,
		arg.Token,
		arg.CreatedAt,
		arg.ExpiresAt,
		arg.Verified,
	)
	return err
}

const deleteMfaEmailCode = `-- name: DeleteMfaEmailCode :exec
DELETE FROM
    mfa_email_code
WHERE
    id = $1
`

func (q *Queries) DeleteMfaEmailCode(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteMfaEmailCode, id)
	return err
}

const getMfaEmailCodeByToken = `-- name: GetMfaEmailCodeByToken :one
SELECT
    id,
    mfa_method_id,
    token,
    created_at,
    expires_at,
    verified
FROM
    mfa_email_code
WHERE
    mfa_method_id = $1
    AND token = $2
`

type GetMfaEmailCodeByTokenParams struct {
	MfaMethodID uuid.UUID `db:"mfa_method_id"`
	Token       string    `db:"token"`
}

// ----------------------------------QUERIES--------------------------------------
func (q *Queries) GetMfaEmailCodeByToken(ctx context.Context, arg GetMfaEmailCodeByTokenParams) (MfaEmailCode, error) {
	row := q.db.QueryRow(ctx, getMfaEmailCodeByToken, arg.MfaMethodID, arg.Token)
	var i MfaEmailCode
	err := row.Scan(
		&i.ID,
		&i.MfaMethodID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.Verified,
	)
	return i, err
}

const revokeMfaEmailCodeByMFaMethodId = `-- name: RevokeMfaEmailCodeByMFaMethodId :exec
DELETE FROM
    mfa_email_code
WHERE
    mfa_method_id = $1
`

func (q *Queries) RevokeMfaEmailCodeByMFaMethodId(ctx context.Context, mfaMethodID uuid.UUID) error {
	_, err := q.db.Exec(ctx, revokeMfaEmailCodeByMFaMethodId, mfaMethodID)
	return err
}

const updateMfaEmailCode = `-- name: UpdateMfaEmailCode :exec
UPDATE
    mfa_email_code
SET
    mfa_method_id = $1,
    token = $2,
    created_at = $3,
    expires_at = $4,
    verified = $5
WHERE
    id = $6
`

type UpdateMfaEmailCodeParams struct {
	MfaMethodID uuid.UUID        `db:"mfa_method_id"`
	Token       string           `db:"token"`
	CreatedAt   pgtype.Timestamp `db:"created_at"`
	ExpiresAt   pgtype.Timestamp `db:"expires_at"`
	Verified    bool             `db:"verified"`
	ID          uuid.UUID        `db:"id"`
}

func (q *Queries) UpdateMfaEmailCode(ctx context.Context, arg UpdateMfaEmailCodeParams) error {
	_, err := q.db.Exec(ctx, updateMfaEmailCode,
		arg.MfaMethodID,
		arg.Token,
		arg.CreatedAt,
		arg.ExpiresAt,
		arg.Verified,
		arg.ID,
	)
	return err
}
