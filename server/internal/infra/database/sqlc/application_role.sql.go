// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: application_role.sql

package pgstore

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addRole = `-- name: AddRole :exec
INSERT INTO
    application_role (
        id,
        application_id,
        name,
        description,
        created_at,
        updated_at
    )
VALUES
    (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6
    )
`

type AddRoleParams struct {
	ID            uuid.UUID        `db:"id"`
	ApplicationID uuid.UUID        `db:"application_id"`
	Name          string           `db:"name"`
	Description   *string          `db:"description"`
	CreatedAt     pgtype.Timestamp `db:"created_at"`
	UpdatedAt     *time.Time       `db:"updated_at"`
}

// ----------------------------------COMMANDS--------------------------------------
// Add Role to Application
func (q *Queries) AddRole(ctx context.Context, arg AddRoleParams) error {
	_, err := q.db.Exec(ctx, addRole,
		arg.ID,
		arg.ApplicationID,
		arg.Name,
		arg.Description,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const listRolesFromApplication = `-- name: ListRolesFromApplication :many
SELECT
    id,
    application_id,
    name,
    description,
    created_at,
    updated_at
FROM
    application_role
WHERE
    application_id = $1
`

// ----------------------------------QUERIES---------------------------------------
// List Roles from Application
func (q *Queries) ListRolesFromApplication(ctx context.Context, applicationID uuid.UUID) ([]ApplicationRole, error) {
	rows, err := q.db.Query(ctx, listRolesFromApplication, applicationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApplicationRole
	for rows.Next() {
		var i ApplicationRole
		if err := rows.Scan(
			&i.ID,
			&i.ApplicationID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeRole = `-- name: RemoveRole :exec
DELETE FROM
    application_role
WHERE
    id = $1
`

// Remove Role from Application
func (q *Queries) RemoveRole(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeRole, id)
	return err
}
