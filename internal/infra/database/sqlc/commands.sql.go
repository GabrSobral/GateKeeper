// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: commands.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addUser = `-- name: AddUser :exec

INSERT INTO "user" (
    id, 
    email, 
    password_hash, 
    created_at, 
    updated_at,
    is_active,
    is_email_confirmed,
    two_factor_enabled,
    two_factor_secret
) VALUES (
    $1, -- id
    $2, -- email
    $3, -- password_hash
    $4, -- created_at
    $5, -- updated_at
    $6, -- is_active
    $7, -- is_email_confirmed
    $8, -- two_factor_enabled
    $9  -- two_factor_secret
)
`

type AddUserParams struct {
	ID               uuid.UUID        `db:"id" json:"id"`
	Email            string           `db:"email" json:"email"`
	PasswordHash     pgtype.Text      `db:"password_hash" json:"password_hash"`
	CreatedAt        pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt        pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	IsActive         bool             `db:"is_active" json:"is_active"`
	IsEmailConfirmed bool             `db:"is_email_confirmed" json:"is_email_confirmed"`
	TwoFactorEnabled bool             `db:"two_factor_enabled" json:"two_factor_enabled"`
	TwoFactorSecret  pgtype.Text      `db:"two_factor_secret" json:"two_factor_secret"`
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) error {
	_, err := q.db.Exec(ctx, addUser,
		arg.ID,
		arg.Email,
		arg.PasswordHash,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IsActive,
		arg.IsEmailConfirmed,
		arg.TwoFactorEnabled,
		arg.TwoFactorSecret,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec

UPDATE "user" SET
    email = $1,
    password_hash = $2,
    updated_at = $3,
    is_active = $4,
    is_email_confirmed = $5,
    two_factor_enabled = $6,
    two_factor_secret = $7
WHERE id = $8
`

type UpdateUserParams struct {
	Email            string           `db:"email" json:"email"`
	PasswordHash     pgtype.Text      `db:"password_hash" json:"password_hash"`
	UpdatedAt        pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	IsActive         bool             `db:"is_active" json:"is_active"`
	IsEmailConfirmed bool             `db:"is_email_confirmed" json:"is_email_confirmed"`
	TwoFactorEnabled bool             `db:"two_factor_enabled" json:"two_factor_enabled"`
	TwoFactorSecret  pgtype.Text      `db:"two_factor_secret" json:"two_factor_secret"`
	ID               uuid.UUID        `db:"id" json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.Email,
		arg.PasswordHash,
		arg.UpdatedAt,
		arg.IsActive,
		arg.IsEmailConfirmed,
		arg.TwoFactorEnabled,
		arg.TwoFactorSecret,
		arg.ID,
	)
	return err
}
