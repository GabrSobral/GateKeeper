// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tenant.sql

package pgstore

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addTenant = `-- name: AddTenant :exec
INSERT INTO tenant (
    id,
    name,
    description,
    created_at
) VALUES (
    $1, -- user_id
    $2, -- name
    $3, -- description
    $4 -- user_id
)
`

type AddTenantParams struct {
	UserID      uuid.UUID        `db:"user_id"`
	Name        string           `db:"name"`
	Description *string          `db:"description"`
	CreatedAt   pgtype.Timestamp `db:"created_at"`
}

func (q *Queries) AddTenant(ctx context.Context, arg AddTenantParams) error {
	_, err := q.db.Exec(ctx, addTenant,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.CreatedAt,
	)
	return err
}

const listTenants = `-- name: ListTenants :many
SELECT
    id,
    name,
    description,
    created_at,
    updated_at
FROM tenant
ORDER BY created_at DESC
`

func (q *Queries) ListTenants(ctx context.Context) ([]Tenant, error) {
	rows, err := q.db.Query(ctx, listTenants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tenant
	for rows.Next() {
		var i Tenant
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeTenant = `-- name: RemoveTenant :exec
DELETE FROM tenant
WHERE id = $1
`

func (q *Queries) RemoveTenant(ctx context.Context, tenantID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeTenant, tenantID)
	return err
}

const updateTenant = `-- name: UpdateTenant :exec
UPDATE tenant
SET
    name = $1,
    description = $2,
    updated_at = $3
WHERE id = $4
`

type UpdateTenantParams struct {
	Name        string     `db:"name"`
	Description *string    `db:"description"`
	UpdatedAt   *time.Time `db:"updated_at"`
	ID          uuid.UUID  `db:"id"`
}

func (q *Queries) UpdateTenant(ctx context.Context, arg UpdateTenantParams) error {
	_, err := q.db.Exec(ctx, updateTenant,
		arg.Name,
		arg.Description,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
