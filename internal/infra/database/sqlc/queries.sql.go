// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
)

const getEmailConfirmationByEmail = `-- name: GetEmailConfirmationByEmail :one

SELECT
    id,
    user_id,
    email,
    token,
    created_at,
    cool_down,
    expires_at,
    is_used
FROM email_confirmation
WHERE 
    email = $1 AND 
    user_id = $2
`

type GetEmailConfirmationByEmailParams struct {
	Email  string    `db:"email"`
	UserID uuid.UUID `db:"user_id"`
}

func (q *Queries) GetEmailConfirmationByEmail(ctx context.Context, arg GetEmailConfirmationByEmailParams) (EmailConfirmation, error) {
	row := q.db.QueryRow(ctx, getEmailConfirmationByEmail, arg.Email, arg.UserID)
	var i EmailConfirmation
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.Token,
		&i.CreatedAt,
		&i.CoolDown,
		&i.ExpiresAt,
		&i.IsUsed,
	)
	return i, err
}

const getExternalLoginByProviderKey = `-- name: GetExternalLoginByProviderKey :one

SELECT
    user_id,
    email,
    provider,
    provider_key
FROM external_login
WHERE
    provider = $1 AND
    provider_key = $2
`

type GetExternalLoginByProviderKeyParams struct {
	Provider    string `db:"provider"`
	ProviderKey string `db:"provider_key"`
}

func (q *Queries) GetExternalLoginByProviderKey(ctx context.Context, arg GetExternalLoginByProviderKeyParams) (ExternalLogin, error) {
	row := q.db.QueryRow(ctx, getExternalLoginByProviderKey, arg.Provider, arg.ProviderKey)
	var i ExternalLogin
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Provider,
		&i.ProviderKey,
	)
	return i, err
}

const getExternalLoginByUserID = `-- name: GetExternalLoginByUserID :one

SELECT
    user_id,
    email,
    provider,
    provider_key
FROM external_login
WHERE
    user_id = $1
`

func (q *Queries) GetExternalLoginByUserID(ctx context.Context, userID uuid.UUID) (ExternalLogin, error) {
	row := q.db.QueryRow(ctx, getExternalLoginByUserID, userID)
	var i ExternalLogin
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Provider,
		&i.ProviderKey,
	)
	return i, err
}

const getPasswordResetByTokenID = `-- name: GetPasswordResetByTokenID :one

SELECT
    id,
    user_id,
    token,
    created_at,
    expires_at
FROM password_reset_token
WHERE
    id = $1
`

func (q *Queries) GetPasswordResetByTokenID(ctx context.Context, id uuid.UUID) (PasswordResetToken, error) {
	row := q.db.QueryRow(ctx, getPasswordResetByTokenID, id)
	var i PasswordResetToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getRefreshTokensFromUser = `-- name: GetRefreshTokensFromUser :many

SELECT
    id,
    user_id,
    available_refreshes,
    expires_at,
    created_at
FROM refresh_token
WHERE user_id = $1
`

func (q *Queries) GetRefreshTokensFromUser(ctx context.Context, userID uuid.UUID) ([]RefreshToken, error) {
	rows, err := q.db.Query(ctx, getRefreshTokensFromUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RefreshToken
	for rows.Next() {
		var i RefreshToken
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AvailableRefreshes,
			&i.ExpiresAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one

SELECT
    id,
    email,
    password_hash,
    created_at,
    updated_at,
    is_active,
    is_email_confirmed,
    two_factor_enabled,
    two_factor_secret
FROM
    "user"
WHERE
    email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
		&i.IsEmailConfirmed,
		&i.TwoFactorEnabled,
		&i.TwoFactorSecret,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one

SELECT
    id,
    email,
    password_hash,
    created_at,
    updated_at,
    is_active,
    is_email_confirmed,
    two_factor_enabled,
    two_factor_secret
FROM
    "user"
WHERE
    id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
		&i.IsEmailConfirmed,
		&i.TwoFactorEnabled,
		&i.TwoFactorSecret,
	)
	return i, err
}

const getUserProfileByUserId = `-- name: GetUserProfileByUserId :one

SELECT
    user_id,
    first_name,
    last_name,
    phone_number,
    "address",
    photo_url
FROM
    user_profile
WHERE
    user_id = $1
`

func (q *Queries) GetUserProfileByUserId(ctx context.Context, userID uuid.UUID) (UserProfile, error) {
	row := q.db.QueryRow(ctx, getUserProfileByUserId, userID)
	var i UserProfile
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Address,
		&i.PhotoUrl,
	)
	return i, err
}

const isUserExistsByEmail = `-- name: IsUserExistsByEmail :one

SELECT
    EXISTS (
        SELECT 1 FROM "user"
        WHERE email = $1
    )
`

func (q *Queries) IsUserExistsByEmail(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, isUserExistsByEmail, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const isUserExistsById = `-- name: IsUserExistsById :one

SELECT
    EXISTS (
        SELECT 1 FROM "user"
        WHERE id = $1
    )
`

func (q *Queries) IsUserExistsById(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, isUserExistsById, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
