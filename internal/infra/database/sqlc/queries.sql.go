// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
)

const getUserByEmail = `-- name: GetUserByEmail :one

SELECT
    id,
    email,
    password_hash,
    created_at,
    updated_at,
    is_active,
    is_email_confirmed,
    two_factor_enabled,
    two_factor_secret
FROM
    "user"
WHERE
    email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
		&i.IsEmailConfirmed,
		&i.TwoFactorEnabled,
		&i.TwoFactorSecret,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one

SELECT
    id,
    email,
    password_hash,
    created_at,
    updated_at,
    is_active,
    is_email_confirmed,
    two_factor_enabled,
    two_factor_secret
FROM
    "user"
WHERE
    id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
		&i.IsEmailConfirmed,
		&i.TwoFactorEnabled,
		&i.TwoFactorSecret,
	)
	return i, err
}

const isUserExistsByEmail = `-- name: IsUserExistsByEmail :one

SELECT
    EXISTS (
        SELECT 1 FROM "user"
        WHERE email = $1
    )
`

func (q *Queries) IsUserExistsByEmail(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, isUserExistsByEmail, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const isUserExistsById = `-- name: IsUserExistsById :one

SELECT
    EXISTS (
        SELECT 1 FROM "user"
        WHERE id = $1
    )
`

func (q *Queries) IsUserExistsById(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, isUserExistsById, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
