// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: external_login.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
)

const addExternalLogin = `-- name: AddExternalLogin :exec

INSERT INTO external_login (
    user_id,
    email,
    provider,
    provider_key
) VALUES (
    $1, -- user_id
    $2, -- email
    $3, -- provider
    $4 -- provider_key
)
`

type AddExternalLoginParams struct {
	UserID      uuid.UUID `db:"user_id"`
	Email       string    `db:"email"`
	Provider    string    `db:"provider"`
	ProviderKey string    `db:"provider_key"`
}

// ----------------------------------COMMANDS--------------------------------------
func (q *Queries) AddExternalLogin(ctx context.Context, arg AddExternalLoginParams) error {
	_, err := q.db.Exec(ctx, addExternalLogin,
		arg.UserID,
		arg.Email,
		arg.Provider,
		arg.ProviderKey,
	)
	return err
}

const getExternalLoginByProviderKey = `-- name: GetExternalLoginByProviderKey :one

SELECT
    user_id,
    email,
    provider,
    provider_key
FROM external_login
WHERE
    provider = $1 AND
    provider_key = $2
`

type GetExternalLoginByProviderKeyParams struct {
	Provider    string `db:"provider"`
	ProviderKey string `db:"provider_key"`
}

// ----------------------------------QUERIES--------------------------------------
func (q *Queries) GetExternalLoginByProviderKey(ctx context.Context, arg GetExternalLoginByProviderKeyParams) (ExternalLogin, error) {
	row := q.db.QueryRow(ctx, getExternalLoginByProviderKey, arg.Provider, arg.ProviderKey)
	var i ExternalLogin
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Provider,
		&i.ProviderKey,
	)
	return i, err
}

const getExternalLoginByUserID = `-- name: GetExternalLoginByUserID :one
SELECT
    user_id,
    email,
    provider,
    provider_key
FROM external_login
WHERE
    user_id = $1
`

func (q *Queries) GetExternalLoginByUserID(ctx context.Context, userID uuid.UUID) (ExternalLogin, error) {
	row := q.db.QueryRow(ctx, getExternalLoginByUserID, userID)
	var i ExternalLogin
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Provider,
		&i.ProviderKey,
	)
	return i, err
}
