// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: refresh_token.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addRefreshToken = `-- name: AddRefreshToken :exec

INSERT INTO refresh_token (
    id,
    user_id,
    available_refreshes,
    expires_at,
    created_at
) VALUES (
    $1, -- id
    $2, -- user_id
    $3, -- available_refreshes
    $4, -- expires_at
    $5 -- created_at
)
`

type AddRefreshTokenParams struct {
	ID                 uuid.UUID        `db:"id"`
	UserID             uuid.UUID        `db:"user_id"`
	AvailableRefreshes int32            `db:"available_refreshes"`
	ExpiresAt          pgtype.Timestamp `db:"expires_at"`
	CreatedAt          pgtype.Timestamp `db:"created_at"`
}

// ----------------------------------COMMANDS--------------------------------------
func (q *Queries) AddRefreshToken(ctx context.Context, arg AddRefreshTokenParams) error {
	_, err := q.db.Exec(ctx, addRefreshToken,
		arg.ID,
		arg.UserID,
		arg.AvailableRefreshes,
		arg.ExpiresAt,
		arg.CreatedAt,
	)
	return err
}

const getRefreshTokensFromUser = `-- name: GetRefreshTokensFromUser :many

SELECT
    id,
    user_id,
    available_refreshes,
    expires_at,
    created_at
FROM refresh_token
WHERE user_id = $1
`

// ----------------------------------QUERIES--------------------------------------
func (q *Queries) GetRefreshTokensFromUser(ctx context.Context, userID uuid.UUID) ([]RefreshToken, error) {
	rows, err := q.db.Query(ctx, getRefreshTokensFromUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RefreshToken
	for rows.Next() {
		var i RefreshToken
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AvailableRefreshes,
			&i.ExpiresAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeRefreshTokenFromUser = `-- name: RevokeRefreshTokenFromUser :exec
DELETE FROM refresh_token WHERE user_id = $1
`

func (q *Queries) RevokeRefreshTokenFromUser(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, revokeRefreshTokenFromUser, userID)
	return err
}
