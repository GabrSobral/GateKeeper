// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package pgstore

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addUser = `-- name: AddUser :exec


INSERT INTO "user" (
    id, 
    email, 
    password_hash, 
    created_at, 
    updated_at,
    is_active,
    is_email_confirmed,
    two_factor_enabled,
    two_factor_secret
) VALUES (
    $1, -- id
    $2, -- email
    $3, -- password_hash
    $4, -- created_at
    $5, -- updated_at
    $6, -- is_active
    $7, -- is_email_confirmed
    $8, -- two_factor_enabled
    $9  -- two_factor_secret
)
`

type AddUserParams struct {
	ID               uuid.UUID        `db:"id"`
	Email            string           `db:"email"`
	PasswordHash     *string          `db:"password_hash"`
	CreatedAt        pgtype.Timestamp `db:"created_at"`
	UpdatedAt        *time.Time       `db:"updated_at"`
	IsActive         bool             `db:"is_active"`
	IsEmailConfirmed bool             `db:"is_email_confirmed"`
	TwoFactorEnabled bool             `db:"two_factor_enabled"`
	TwoFactorSecret  *string          `db:"two_factor_secret"`
}

// ----------------------------------COMMANDS--------------------------------------
func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) error {
	_, err := q.db.Exec(ctx, addUser,
		arg.ID,
		arg.Email,
		arg.PasswordHash,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IsActive,
		arg.IsEmailConfirmed,
		arg.TwoFactorEnabled,
		arg.TwoFactorSecret,
	)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one

SELECT
    id,
    email,
    password_hash,
    created_at,
    updated_at,
    is_active,
    is_email_confirmed,
    two_factor_enabled,
    two_factor_secret
FROM
    "user"
WHERE
    email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
		&i.IsEmailConfirmed,
		&i.TwoFactorEnabled,
		&i.TwoFactorSecret,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one


SELECT
    id,
    email,
    password_hash,
    created_at,
    updated_at,
    is_active,
    is_email_confirmed,
    two_factor_enabled,
    two_factor_secret
FROM
    "user"
WHERE
    id = $1
`

// ----------------------------------QUERIES--------------------------------------
func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
		&i.IsEmailConfirmed,
		&i.TwoFactorEnabled,
		&i.TwoFactorSecret,
	)
	return i, err
}

const isUserExistsByEmail = `-- name: IsUserExistsByEmail :one

SELECT
    EXISTS (
        SELECT 1 FROM "user"
        WHERE email = $1
    )
`

func (q *Queries) IsUserExistsByEmail(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, isUserExistsByEmail, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const isUserExistsById = `-- name: IsUserExistsById :one

SELECT
    EXISTS (
        SELECT 1 FROM "user"
        WHERE id = $1
    )
`

func (q *Queries) IsUserExistsById(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, isUserExistsById, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateUser = `-- name: UpdateUser :exec

UPDATE "user" SET
    email = $1,
    password_hash = $2,
    updated_at = $3,
    is_active = $4,
    is_email_confirmed = $5,
    two_factor_enabled = $6,
    two_factor_secret = $7
WHERE id = $8
`

type UpdateUserParams struct {
	Email            string     `db:"email"`
	PasswordHash     *string    `db:"password_hash"`
	UpdatedAt        *time.Time `db:"updated_at"`
	IsActive         bool       `db:"is_active"`
	IsEmailConfirmed bool       `db:"is_email_confirmed"`
	TwoFactorEnabled bool       `db:"two_factor_enabled"`
	TwoFactorSecret  *string    `db:"two_factor_secret"`
	ID               uuid.UUID  `db:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.Email,
		arg.PasswordHash,
		arg.UpdatedAt,
		arg.IsActive,
		arg.IsEmailConfirmed,
		arg.TwoFactorEnabled,
		arg.TwoFactorSecret,
		arg.ID,
	)
	return err
}
